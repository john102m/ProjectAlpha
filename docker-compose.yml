services:
  catalog:
    build:
      context: .
      dockerfile: CatalogService/Dockerfile
    ports:
      - "5001:8080"
    depends_on:
      - rabbitmq
      - postgres-catalog     # Add this dependency so catalog waits for DB
    environment:
      #- ConnectionStrings:CatalogDatabase=Host=postgres-catalog;Port=5432;Username=cataloguser;Password=catalogpass;Database=catalogdb
      - ConnectionStrings__CatalogDatabase=Host=postgres-catalog;Port=5432;Username=cataloguser;Password=catalogpass;Database=catalogdb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/home"]
      interval: 30s
      timeout: 10s
      retries: 5 

  booking:
    build:
      context: .
      dockerfile: BookingService/Dockerfile
    ports:
      - "5002:8080"
    environment:
      - RABBITMQ_HOST=rabbitmq 
    depends_on:
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/home"]  

  user:
    build:
      context: .
      dockerfile: UserService/Dockerfile
    ports:
      - "5003:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/home"]  

  email:
    build:
      context: .
      dockerfile: EmailService/Dockerfile
    ports:
      - "5004:8080"
    environment:
      - DOTNET_EnableAnsiColor=true
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      - rabbitmq    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/home"] 

  apigateway:
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production  
    depends_on:
      - rabbitmq
      - catalog
      - booking
      - user
      - email
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"     # message broker port
      - "15672:15672"   # RabbitMQ Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 30s
      timeout: 10s
      retries: 5
  postgres-catalog:
    image: postgres:15
    container_name: postgres-catalog
    environment:
      POSTGRES_USER: cataloguser
      POSTGRES_PASSWORD: catalogpass
      POSTGRES_DB: catalogdb
    ports:
      - "5433:5432"  # maps host 5433 to container 5432 (Postgres default)
    volumes:
      - catalog_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cataloguser -d catalogdb"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  catalog_pgdata: